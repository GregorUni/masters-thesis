start: 12.10.2012 
end:28.02.2014
low:0.06
high:1.054031
high:1.539
##################
library(sets)
library(lubridate)
library(dplyr)
library('pracma')
library(stringr)
library(ggplot2)
library(scales)
library(labeling)
library(ggthemes)

########################################
#this function filters the dataset by a start- and an enddate
filterByDate<-function()
{
k<-1
datalist3 = list()
datalist4 = list()
#how many files are used for filtering(current its 20 files)
for(i in 1:30) {
nameoffile2<-paste("Power-Networks-LCL-June2015(withAcornGps)v2_",i,".csv", sep="")
file2 <- read.table(file = nameoffile2,header=TRUE, sep = ",",stringsAsFactors = FALSE,comment.char = "")
#these lines are checking that an LCLid has more than 39000 values and filters every LCLid which is under this threshold
#8500 = 1 year
ind<- with(file2,table(file2$LCLid) > 8500)
ind <- ind[ind == TRUE]
ind <-rownames(ind)
file2<- subset(file2, LCLid %in% ind)
#in this lane its possible to change the start and enddate

setwithLCLid2<-as.set(file2[[1]])
for(j in 1:length(setwithLCLid2)) {
elementofset<-set(as.character(setwithLCLid2)[j])
getData<- subset(file2, LCLid %in% elementofset)

if(any(str_detect(getData[[3]], "2013-01-01"))){
if(any(str_detect(getData[[3]], "2014-01-02"))){
datalist3[[k]]<-getData[(getData[[3]] > "2013-01-01" & getData[[3]] <= "2014-01-01"),]
k<-k+1
}
}
}
}
df3 <<- do.call(rbind, datalist3)
df3
}
##########################################################################


nameoffile3<-paste("deviationOf_3_Houses.txt", sep="\t")
file3 <- read.table(file = nameoffile3,header=TRUE, sep = "\t",stringsAsFactors = FALSE,comment.char = "")


############################################################################
#define a set to get the number of LCLid 
medianOfKWs <- vector()
setwithLCLid<-as.set(df3[[1]])
vectorOfLCid<-as.vector(as.character(setwithLCLid))
random<-sample(vectorOfLCid, 50)
#get number of LCLid
lengthofset=length(random)
#iterates over number of LCLid and takes one house and write all values in a .csv
for(i in 1:lengthofset) {
#iterate through different houses
elementofset<-random[i]
getKW<- subset(df3, LCLid %in% elementofset)
#get KW numbers
getKW<-getKW[,4:4]
#get numeric kw numbers
getKW<-as.numeric(getKW)
getKW<-getKW[!is.na(getKW)]
#sort by decreasing
getKW<-sort(getKW, decreasing = FALSE)
getKW<-getKW[round(0.01 * length(getKW)) : length(getKW)]
medianOfKWs[i]<-getKW[1]
}
filteredmedianOfKWs = medianOfKWs[medianOfKWs > 0.01]
#####kw average per half hour!!!!
mean(filteredmedianOfKWs)
########################################################################
#define a set to get the number of LCLid
highKWs <- vector()
setwithLCLid<-as.set(df3[[1]])
#get number of LCLid
lengthofset=length(setwithLCLid)
#iterates over number of LCLid and takes one house and write all values in a .csv
for(i in 1:lengthofset) {
#iterate through different houses
elementofset<-set(as.character(setwithLCLid)[i])
getKW<- subset(df3, LCLid %in% elementofset)
#get KW numbers
getKW<-getKW[,4:4]
#get numeric kw numbers
getKW<-as.numeric(getKW)
getKW<-getKW[!is.na(getKW)]
#sort by ascending
getKW<-sort(getKW, decreasing = TRUE)
getKW<-getKW[round(0.01 * length(getKW)) : length(getKW)]
highKWs[i]<-getKW[1]
}
#####kw average per half hour!!!!
mean(highKWs)

df4<-na.omit(df3[,4])
df4 <-sort(df4[1], decreasing = FALSE)
####################################################
#get max electricity consumption
test <-as.vector(df3[,4])
test<-as.numeric(test)
test <-sort(test, decreasing = TRUE)
test2<-test[round(0.01 * length(test)) : length(test)]

########################################################
data <- vector()
sumdata<-numeric()
difference<-numeric()
deviation<-numeric()
lengthofvectors<-vector()
diagramlist<-list()
standarddeviation<-vector()
diagram<-vector()
averagedata<-vector()
datevector<-vector()
counter<<-1

initTest<-function()
{
counter<<-1
data <<- vector()
sumdata<<-numeric()
difference<<-numeric()
deviation<<-numeric()
lengthofvectors<<-vector()
diagramlist<<-list()
standarddeviation<<-vector()
diagram<<-vector()
averagedata<<-vector()
datevector<<-vector()
}

calcDeviation<-function(lengthOfTestCase)
{
options(scipen = 999) #disabling scientific notation
l<<-0
z<<-0
setwithLCLid<<-as.set(df3[[1]])
vectorOfLCid<-as.vector(as.character(setwithLCLid))
random<-sample(vectorOfLCid, lengthOfTestCase)

#stromverbrauch der einzelnen häuser aus dem datensatz ziehen
for(i in 1:lengthOfTestCase) {

elementofset<<-random[i]
getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
data[i]<-getKWOfHouse[4]
}
lengthofdata<<-length(data)
#summe aller stromverbräuche berechnen
for(i in 1:lengthofdata)
{
data1<<-as.numeric(unlist(data[i]))
data1[is.na(data1)] <<- 0
if (isempty(sumdata)) {
length(data1)<<-17480
sumdata<<-data1
}
#vektoren auf einheitliche größe bringen
if((length(sumdata)-length(data1)) <10)
{
length(data1)<<-17480
#"globale summe" berechnen"
sumdata<<-sumdata+data1
length(sumdata)
l<<-l+1

}
lengthofvectors[i]<<-length(data1)
}
sumdata<<-sumdata*(1/lengthOfTestCase)
standarddeviationOfSumdata<<-sd(sumdata[1:17471])
###differenz zwischen ergebis "globaler" summe und "lokale" summe berechnen
for(i in 1:lengthOfTestCase)
{
elementofset<<-set(as.character(setwithLCLid)[i])
getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
difference<<-as.numeric(unlist(getKWOfHouse[4]))-sumdata
#die differenz mit der standard abweichung vergleichen und hochzählen wie oft die differenz größer ist als die standardabweichung
for(j in 17471)
{
if(abs(difference[j]) > standarddeviationOfSumdata)
{
 z<<-z+1
}
}
deviation[i]<<-z/17471

}
deviation
#diagramme bilden
getDiagram(counter)
counter<<-counter+1
}

getDiagram<-function(counter)
{
sumdata4<<-sumdata
standarddeviation<<-sd(sumdata[1:17471])
for(i in 1:364) {
averagedata[i]<<-mean(head(sumdata4,48))
sumdata4<<- sumdata4[-1:-48]
}
#getTimeValues<<-head(getKWOfHouse[[3]],17480)
#getTimeValues<<-as.POSIXct(getTimeValues, format='%Y-%m-%d  %H:%M:%S')
datevector<<-seq(as.Date("2013-01-01"), as.Date("2014-01-01"), by="days")
averageminusSD<<-averagedata-standarddeviation
averageplusSD<<-averagedata+standarddeviation
df <- data.frame(datevector,averagedata,averageplusSD,averageminusSD)
diagram<-ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + scale_x_date(limits=as.Date(c("2013-01-01","2013-12-30")),date_labels = "%b" ,expand = c(0,0),date_breaks = "1 months") + scale_y_continuous(expand = c(0,0)) +labs(title= "Average Power Consumption per Day") +ylab("Average Power Consumption per Day")+xlab("Month")
diagramlist[[counter]]<<-diagram
}
#####################################################
data <- vector()
sumdata<-numeric()
difference<-numeric()
deviation<-numeric()
lengthofvectors<-vector()
diagramlist<-list()
standarddeviation<-vector()
diagram<-vector()
averagedata<-vector()
datevector<-vector()
standarddeviationOfHouses<-vector()
sumOfallHouses<-vector()
z<-vector()
counter<<-1

initTest<-function()
{
data <<- vector()
sumdata<<-numeric()
difference<<-numeric()
deviation<<-numeric()
lengthofvectors<<-vector()
diagramlist<<-list()
standarddeviation<<-vector()
diagram<<-vector()
averagedata<<-vector()
datevector<<-vector()
standarddeviationOfHouses<<-vector()
sumOfallHouses<<-vector()
z<<-vector()
}

calcDeviation<-function(lengthOfTestCase)
{
options(scipen = 999) #disabling scientific notation
l<<-0
z<<-0
setwithLCLid<<-as.set(df3[[1]])
vectorOfLCid<<-as.vector(as.character(setwithLCLid))
#lengthOfTestCase<-2
random<<-sample(vectorOfLCid, lengthOfTestCase)

#stromverbrauch der einzelnen häuser aus dem datensatz ziehen
#17471 sind die Anzahl aller Einträge in einem Jahr
#berechne für jeden TimeStamp
for(TimeStamp in 1:17471)
{
    Sys.sleep(0.001)
    print(TimeStamp)
    for(i in 1:lengthOfTestCase) {
        #nehme ein zufälliges Haus
        elementofset<<-random[i]
        #Bekomme von einem Haus den Stromverbrauch und speichere es in data[i]. es werden über alle häuser iteriert wobei i für ein Haus steht
        getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
        data[i]<<-getKWOfHouse[TimeStamp,4]
        if(is.na(data[i]))
        {
        	data[i]<<-0
        }
    }
    #berechne die Standardabweichung von data
    standarddeviationOfHouses[TimeStamp]<<-sd(data[1:lengthOfTestCase])
    #errechne den Gesamtverbrauch von allen Häusern
    sumOfallHouses[TimeStamp]<<-sum(as.numeric(data))*(1/lengthOfTestCase)
    #berechne für jedes Haus
    for(j in 1:lengthOfTestCase) {
    	if(is.na(sumOfallHouses[TimeStamp]))
    	{
    		sumOfallHouses[TimeStamp]<<-0
    	}
        difference<<- as.numeric(data[j])-sumOfallHouses[TimeStamp]
        if(abs(difference) > standarddeviationOfHouses)
        {
            if(is.na(z[j]))
            {
                z[j]<<-0
            }
            z[j]<<-z[j]+1
        }
        if(is.na(z[j]/17471))
        {
        	deviation[j]<<-z[j]
        }
        else
        {
         deviation[j]<<-z[j]/17471
        }
   
    }
}
write.table(deviation, file = sprintf("test/deviationOf_%d_Houses.txt",lengthOfTestCase), sep = "\t", row.names = TRUE, col.names = NA)
write.table(standarddeviationOfHouses, file = sprintf("test/standarddeviationOf_%d_Houses.txt",lengthOfTestCase), sep = "\t", row.names = TRUE, col.names = NA)
write.table(sumOfallHouses, file = sprintf("test/SumOf_%d_Houses.txt",lengthOfTestCase), sep = "\t", row.names = TRUE, col.names = NA)

getDiagram(counter,lengthOfTestCase)
counter<<-counter+1
}

getDiagram<-function(counter,lengthOfTestCase)
{
sumOfallHouses4<<-sumOfallHouses
yearlyStandardDeviation<<-standarddeviationOfHouses
#364
for(i in 1:364) {
averagedata[i]<<-mean(head(sumOfallHouses4,48))
yearlyStandardDeviationForDiagram<<-mean(head(yearlyStandardDeviation,48))
sumOfallHouses4<<- sumOfallHouses4[-1:-48]
yearlyStandardDeviation<<-yearlyStandardDeviation[-1:-48]
}
#getTimeValues<<-head(getKWOfHouse[[3]],17480)
#getTimeValues<<-as.POSIXct(getTimeValues, format='%Y-%m-%d  %H:%M:%S')
datevector<<-seq(as.Date("2013-01-01"),as.Date("2013-12-30"),by="days")
averageminusSD<<-averagedata-yearlyStandardDeviationForDiagram
averageplusSD<<-averagedata+yearlyStandardDeviationForDiagram
#getMin<<-aggregate(averagedata ~ cbind(datevector = format(as.Date(datevector, format = "%Y-%m-%d"))), FUN = min, data=df)
#getIndex<<-which.min(getMin[[2]])
titleName<<-paste("Aggregated Electricity Consumption of ",lengthOfTestCase," Houses", sep="")
plotName<<-paste("Aggregated Electricity Consumption of ",lengthOfTestCase," Houses.png", sep="")
plotName2<<-paste("Aggregated Electricity Consumption of ",lengthOfTestCase," Houses2.png", sep="")
df <<- data.frame(datevector,averagedata,averageplusSD,averageminusSD)
write.table(averagedata, file = sprintf("test/averagedataOf_%d_Houses.txt",lengthOfTestCase), sep = "\t", row.names = TRUE, col.names = NA)
diagram<<-ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + scale_x_date(limits=as.Date(c("2013-01-01","2013-12-30")),date_labels = "%b" ,expan d = c(0,0),date_breaks = "1 months") + scale_y_continuous(expand = c(0,0),limits = c(0,0.5)) +labs(title= titleName) +ylab("Average Electricity Consumption per Day in KWH/hh (per half hours)")+xlab("t in Months") + theme_linedraw()
ggsave(plotName)
diagram2<<-ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + scale_x_date(limits=as.Date(c("2013-01-01","2013-12-30")),date_labels = "%b" ,expand = c(0,0),date_breaks = "1 months") + scale_y_continuous(expand = c(0,0),limits = c(0,0.8)) +labs(title= titleName) +ylab("Average Electricity Consumption per Day in KWH/hh (per half hours)")+xlab("t in Months") + theme_linedraw()
ggsave(plotName2)
diagramlist[[counter]]<<-diagram
}
#####################################################
cat(sprintf("Test mit %d Häusern",lengthOfTestCase),file="results.txt",sep="\n",append=TRUE)
cat("Abweichung eines Hauses vom Gesamtstromverbrauch",file="results.txt",sep="\n",append=TRUE)
cat(deviation,file="results.txt",append=TRUE)
cat(" ",file="results.txt",append=TRUE,sep="\n")
cat("Standardabweichung von allen Häusern",file="results.txt",append=TRUE,sep="\n")
cat(standarddeviationOfHouses,file="results.txt",append=TRUE)
cat(" ",file="results.txt",append=TRUE,sep="\n")
cat("normierter Stromverbrauch von allen Häusern",file="results.txt",append=TRUE,sep="\n")
cat(sumOfallHouses,file="results.txt",append=TRUE)
cat(" ",file="results.txt",append=TRUE,sep="\n")
###########################
getDiagramTest<-function(counter)
{
sumOfallHouses4<<-sumOfallHouses
#364
for(i in 1:100) {
averagedata[i]<<-mean(head(sumOfallHouses4,1))
sumOfallHouses4<<- sumOfallHouses4[-1:-1]
}
#getTimeValues<<-head(getKWOfHouse[[3]],17480)
#getTimeValues<<-as.POSIXct(getTimeValues, format='%Y-%m-%d  %H:%M:%S')
datevector<<-1:100
averageminusSD<<-averagedata-standarddeviationOfHouses
averageplusSD<<-averagedata+standarddeviationOfHouses
df <- data.frame(datevector,averagedata,averageplusSD,averageminusSD)
diagram<-ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + expand_limits(x = 0, y = 0)
diagramlist[[counter]]<<-diagram
}
############################################
getMin<<-aggregate(averagedata ~ cbind(datevector = format(as.Date(datevector, format = "%Y-%m-%d"))), FUN = min, data=df)
getIndex<<-which.min(getMin[[2]])

ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + scale_x_date(limits=as.Date(c("2013-01-01","2013-12-30")),date_labels = "%b" ,expand = c(0,0),date_breaks = "1 months") + scale_y_continuous(expand = c(0,0)) +labs(title= "Average Power Consumption per Day") +ylab("Average Power Consumption per Day")+xlab("t in Months") + theme_linedraw()  + geom_segment(aes(x=df[getIndex,1], y=df[getIndex,2], xend=df[getIndex,1],yend=0),linetype="dashed",color= "red")

############################
#berechne durchschnittlichen verbrauch pro tag
averagedata<-vector()
sumdata2<-sumdata
for(i in 1:364) {
averagedata[i]<-mean(head(sumdata2,48))
sumdata2<- sumdata2[-1:-48]
}
datevector<-vector()
#getTimeValues<-head(getKWOfHouse[[3]],17480)
#getTimeValues<-as.POSIXct(getTimeValues, format='%Y-%m-%d  %H:%M:%S')
datevector<-1:364
df = data.frame(datevector,averagedata)
ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line()

#####################################################
#ein datenpunkt für alle 8 std

averagedata<-vector()
sumdata2<-sumdata
for(i in 1:1092) {
averagedata[i]<-mean(head(sumdata2,16))
sumdata2<- sumdata2[-1:-16]
}
datevector<-1:1092
df = data.frame(datevector,averagedata)
ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line()

####################################################
17480
standarddeviation<-vector()
sumdata3<- sumdata
meanofsumdata<-mean(sumdata3[1:17471])
standarddeviation<-sd(sumdata3[1:17471])
###################################################

ggplot(data=df, aes(x=df[[1]]))+geom_line(aes(y = averagedata, colour = "averagedata")) + geom_line(aes(y = averageplusSD, colour = "averageplusSD")) + geom_line(aes(y = averageminusSD, colour = "averageminusSD")) + expand_limits(x = 0, y = 0)
#####################################################
y<-dnorm(sumdata3, mean = averagedata, sd = standarddeviation)
plot(sumdata3,y)
##################################################
hi<-ggplot_build(diagramlist[[2]])
hi$plot$labels$y<-"Average Energy Consumption in KWH/hh (per half hour)"
hi$plot$labels$x<-"Time in Days"

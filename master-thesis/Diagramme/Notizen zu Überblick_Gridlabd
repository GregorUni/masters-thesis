Wo am besten den DC-Algo implementieren?

Ablauf Gridlab-D Core Initialisierung:

1. Initialisiere Zeitparameter(Welche Zeitzone, bzw. nutze Computerzeit, wenn keine Zeit in GLM-Datei einegestellt ist.
2. Speichere den Pfad des Verzeichnissen, in dem die GLM-Datei aufgerufen wird.
3. Speichere Command Line Parameter
4. Initialisiere den Scheduler von Gridlab-D bzw. PRNG für Scheduler

Gridlab-D API:
The runtime module API links the GridLAB-D core to modules that are created to perform various modeling tasks.
Also Gridlab-D core wird mit den Modulen verbunden durch die API. Der Core kommuniziert durch ein Skript mit den Modul Objekten. Das Skript
entscheidet, welche Funktionen aufgerufen werden.
https://github.com/gridlab-d/gridlab-d/blob/master/gldcore/gridlabd.h

Eine Sequenz von der Gridlab-D API sieht folgendermaßen aus:
1. Registrierung: Ein Modul registriert alle Objektklassen, die im Modul implementiert sind.
2. Erstellung: Der Core ruft Funktionen auf, die die Objekte erstellen während das Model geladen wird.
3. Definition: Der Core speichert alle Werte von Objekten, die in der GLM Datei spezifiert werden. Nach diesem Schritt wurden alle Referenzen in der GLM Datei im Core gespeichert.
4. Validation: Das erstellte Model im Core wird durch das Modul validiert(kurzgesagt).
5. Initialisierung: Der Core ruft die letzte Initialisierungsmethode auf nachdem der Kontext des Objekts komplett definiert worden ist.
6. Synchronisation: Eine Operation die sich mehrfach wiederholt, bis es kein Objekt mehr gibt, dass eine Zustandsänderung erwartet. Der return Wert ist die Zeit, die erwartet wird, bis sich
der Zustand des Objektes wieder ändert.

1. Ansatz:
Es wäre möglich das DC-Netz entweder bei den Triplex_Nodes zu implementieren oder im Gridlab-d Core. Möglicherweise mal schauen wie es im Tape Modul gemacht wird?
So wie es aussieht gibt es eine Funktion "gl_publish_variable". Über diese Funktion kommt man an die Daten von den Variablen für jedes Objekt ran?!
Dann wäre die einfachste Lösung, dass man eine zusätzliche Variable im Triplex_Node erzeugt und das wäre ein Integer, wobei jedes Integer ein DC-Netz darstellt. Dann wird jedes DC-Netz über den IntegerIdentifier berechnet.


Also Variablen für Triplex_node werden in node.h definiert.
Es macht eventuell mehr sinn den dc_net identifier im node.cpp zu definieren. Schau da mal im code nach.

Klassen Erweitern:
http://gridlab-d.shoutwiki.com/wiki/Creating_GLM_Files

gl_verbose() wichtiger aufruf zum debuggen!
Gridlab-D Struktur:
http://gridlab-d.shoutwiki.com/wiki/Programming_conventions
http://gridlab-d.shoutwiki.com/wiki/Theory_of_operation -> Welche funktionen sind die main funktionen.

Wird in core/exec.c gestartet und dort ist der main loop:

Synchronization procedure

Objects are instances of classes. Each class has a synchronization characteristic the determines when it receives synchronization signals from the main exec loop. The sync signals are sent in the following order

    create - called once per object
    init - called until object confirms successful initiatialization (only called once prior to Hassayampa (Version 3.0))

do until clock stops

        precommit - called once per timestep before sync; used to setup for new timestep

    do until valid timestep is found'

            presync - called once per pass from the top rank down; used to prepare objects for bottom-up pass
            sync - called once per pass from the bottom rank up; used to perform main calculations in objects
            postsync - called once per pass from the top rank down; used to complete calculations

        commit - called once per timestep after sync; used to lock-in states

    finalize - called once per simulation after clock stops
    term - called to terminate simulation

sync und init sind wahrscheinlich wichtige funktionen, da in init die parameter von der glm initialisiert werden und in sync könnte man den dc_algorithmus bilden.

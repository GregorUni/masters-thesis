calcDeviation<-function(lengthOfTestCase)
{
options(scipen = 999) #disabling scientific notation
l<<-0
z<<-0
setwithLCLid<<-as.set(df3[[1]])
vectorOfLCid<-as.vector(as.character(setwithLCLid))
random<-sample(vectorOfLCid, lengthOfTestCase)
#stromverbrauch der einzelnen häuser aus dem datensatz ziehen
for(i in 1:lengthOfTestCase) {
elementofset<<-random[i]
getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
data[i]<-getKWOfHouse[4]
}
lengthofdata<<-length(data)
#summe aller stromverbräuche berechnen
for(i in 1:lengthofdata)
{
data1<<-as.numeric(unlist(data[i]))
data1[is.na(data1)] <<- 0
if (isempty(sumdata)) {
length(data1)<<-17480
sumdata<<-data1
}
#vektoren auf einheitliche größe bringen
if((length(sumdata)-length(data1)) <10)
{
length(data1)<<-17480
#"globale summe" berechnen"
sumdata<<-sumdata+data1
length(sumdata)
l<<-l+1
}
lengthofvectors[i]<<-length(data1)
}
sumdata<<-sumdata*(1/lengthOfTestCase)
standarddeviationOfSumdata<<-sd(sumdata[1:17471])
###differenz zwischen ergebis "globaler" summe und "lokale" summe berechnen
for(i in 1:lengthOfTestCase)
{
elementofset<<-set(as.character(setwithLCLid)[i])
getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
difference<<-as.numeric(unlist(getKWOfHouse[4]))-sumdata
#die differenz mit der standard abweichung vergleichen und hochzählen wie oft die differenz größer ist als die standardabweichung
for(j in 17471)
{
if(abs(difference[j]) > standarddeviationOfSumdata)
{
z<<-z+1
}
}
deviation[i]<<-z/17471
}
deviation
#diagramme bilden
getDiagram(counter)
counter<<-counter+1
}
getDiagram<-function(counter)
{
sumdata4<<-sumdata
standarddeviation<<-sd(sumdata[1:17471])
for(i in 1:364) {
averagedata[i]<<-mean(head(sumdata4,48))
sumdata4<<- sumdata4[-1:-48]
}
#getTimeValues<<-head(getKWOfHouse[[3]],17480)
#getTimeValues<<-as.POSIXct(getTimeValues, format='%Y-%m-%d  %H:%M:%S')
datevector<<-1:364
averageminusSD<<-averagedata-standarddeviation
averageplusSD<<-averagedata+standarddeviation
df <- data.frame(datevector,averagedata,averageplusSD,averageminusSD)
diagram<-ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + expand_limits(x = 0, y = 0)
diagramlist[[counter]]<<-diagram
}
calcDeviation<-function(lengthOfTestCase)
{
start_time <<- Sys.time()
options(scipen = 999) #disabling scientific notation
l<<-0
z<<-0
setwithLCLid<<-as.set(df3[[1]])
vectorOfLCid<<-as.vector(as.character(setwithLCLid))
random<<-sample(vectorOfLCid, lengthOfTestCase)
#stromverbrauch der einzelnen häuser aus dem datensatz ziehen
#17471 sind die Anzahl aller Einträge in einem Jahr
#berechne für jeden TimeStamp
for(TimeStamp in 1:1000)
{
Sys.sleep(0.001)
print(TimeStamp)
for(i in 1:lengthOfTestCase) {
#nehme ein zufälliges Haus
elementofset<<-random[i]
#Bekomme von einem Haus den Stromverbrauch und speichere es in data[i]. es werden über alle häuser iteriert wobei i für ein Haus steht
getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
data[i]<<-getKWOfHouse[TimeStamp,4]
}
#berechne die Standardabweichung von data
standarddeviationOfHouses[TimeStamp]<<-sd(data[1:lengthOfTestCase])
#errechne den Gesamtverbrauch von allen Häusern
sumOfallHouses[TimeStamp]<<-sum(as.numeric(data))*(1/lengthOfTestCase)
#berechne für jedes Haus
for(j in 1:lengthOfTestCase) {
difference<<- as.numeric(data[j])-sumOfallHouses[TimeStamp]
if(abs(difference) > standarddeviationOfHouses)
{
if(is.na(z[j]))
{
z[j]<<-0
}
z[j]<<-z[j]+1
}
deviation[j]<<-z[j]/17471
}
}
end_time <<- Sys.time()
time <<-end_time - start_time
getDiagram(counter)
counter<<-counter+1
}
getDiagram<-function(counter)
{
sumOfallHouses4<<-sumOfallHouses
#364
for(i in 1:364) {
averagedata[i]<<-mean(head(sumOfallHouses4,48))
sumOfallHouses4<<- sumOfallHouses4[-1:-48]
}
#getTimeValues<<-head(getKWOfHouse[[3]],17480)
#getTimeValues<<-as.POSIXct(getTimeValues, format='%Y-%m-%d  %H:%M:%S')
datevector<<-1:364
averageminusSD<<-averagedata-standarddeviationOfHouses
averageplusSD<<-averagedata+standarddeviationOfHouses
df <- data.frame(datevector,averagedata,averageplusSD,averageminusSD)
diagram<-ggplot(data=df, aes(x=df[[1]], y=df[[2]]))+geom_line() + expand_limits(x = 0, y = 0)
diagramlist[[counter]]<<-diagram
}
start_time <<- Sys.time()
options(scipen = 999) #disabling scientific notation
l<<-0
z<<-0
setwithLCLid<<-as.set(df3[[1]])
vectorOfLCid<<-as.vector(as.character(setwithLCLid))
random<<-sample(vectorOfLCid, lengthOfTestCase)
#stromverbrauch der einzelnen häuser aus dem datensatz ziehen
#17471 sind die Anzahl aller Einträge in einem Jahr
#berechne für jeden TimeStamp
for(TimeStamp in 1:1000)
{
Sys.sleep(0.001)
print(TimeStamp)
for(i in 1:lengthOfTestCase) {
#nehme ein zufälliges Haus
elementofset<<-random[i]
#Bekomme von einem Haus den Stromverbrauch und speichere es in data[i]. es werden über alle häuser iteriert wobei i für ein Haus steht
getKWOfHouse<<- subset(df3, LCLid %in% elementofset)
data[i]<<-getKWOfHouse[TimeStamp,4]
}
#berechne die Standardabweichung von data
standarddeviationOfHouses[TimeStamp]<<-sd(data[1:lengthOfTestCase])
#errechne den Gesamtverbrauch von allen Häusern
sumOfallHouses[TimeStamp]<<-sum(as.numeric(data))*(1/lengthOfTestCase)
#berechne für jedes Haus
for(j in 1:lengthOfTestCase) {
difference<<- as.numeric(data[j])-sumOfallHouses[TimeStamp]
if(abs(difference) > standarddeviationOfHouses)
{
if(is.na(z[j]))
{
z[j]<<-0
}
z[j]<<-z[j]+1
}
deviation[j]<<-z[j]/17471
}
}
end_time <<- Sys.time()
time <<-end_time - start_time
getDiagram(counter)
counter<<-counter+1
library(sets)
library(lubridate)
library(dplyr)
library('pracma')
library(stringr)
library(ggplot2)
library(scales)
library(labeling)
k<-1
datalist3 = list()
datalist4 = list()
#how many files are used for filtering(current its 20 files)
for(i in 1:10) {
nameoffile2<-paste("Power-Networks-LCL-June2015(withAcornGps)v2_",i,".csv", sep="")
file2 <- read.table(file = nameoffile2,header=TRUE, sep = ",",stringsAsFactors = FALSE,comment.char = "")
#these lines are checking that an LCLid has more than 39000 values and filters every LCLid which is under this threshold
#8500 = 1 year
ind<- with(file2,table(file2$LCLid) > 8500)
ind <- ind[ind == TRUE]
ind <-rownames(ind)
file2<- subset(file2, LCLid %in% ind)
#in this lane its possible to change the start and enddate
setwithLCLid2<-as.set(file2[[1]])
for(j in 1:length(setwithLCLid2)) {
elementofset<-set(as.character(setwithLCLid2)[j])
getData<- subset(file2, LCLid %in% elementofset)
if(any(str_detect(getData[[3]], "2013-01-01"))){
if(any(str_detect(getData[[3]], "2014-01-02"))){
datalist3[[k]]<-getData[(getData[[3]] > "2013-01-02" & getData[[3]] <= "2014-01-01"),]
k<-k+1
}
}
}
}
df3 <<- do.call(rbind, datalist3)
df3
